>>> matrix_divided = __import__('2-matrix_divided').matrix_divided
>>> matrix = [[1, 2, 3], [4, 5, 6]]
>>> matrix_divided(matrix, 3)
[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

# Test invalid matrix types
>>> matrix_divided("not matrix", 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats
>>> matrix_divided([[1, 2], ["3", 4]], 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test uneven rows
>>> matrix_divided([[1, 2], [3]], 1)
Traceback (most recent call last):
TypeError: Each row of the matrix must have the same size

# Test invalid divisors
>>> matrix_divided(matrix, "1")
Traceback (most recent call last):
TypeError: div must be a number

# Test division by zero
>>> matrix_divided(matrix, 0)
Traceback (most recent call last):
ZeroDivisionError: division by zero

# Test empty matrix
>>> matrix_divided([], 1)
Traceback (most recent call last):
TypeError: matrix must be a matrix (list of lists) of integers/floats

# Test missing arguments
>>> matrix_divided()
Traceback (most recent call last):
TypeError: matrix_divided() missing 2 required positional arguments: 'matrix' and 'div'
>>> matrix_divided(matrix)
Traceback (most recent call last):
TypeError: matrix_divided() missing 1 required positional argument: 'div'

# Test division by infinity
>>> import math
>>> matrix_divided([[1, 2], [3, 4]], math.inf)
[[0.0, 0.0], [0.0, 0.0]]
